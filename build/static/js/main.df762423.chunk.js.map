{"version":3,"sources":["utils/duration/index.js","pomodoro/Session.js","pomodoro/TimerDisplay.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Session","session","focusDuration","breakDuration","x","secondInterval","label","timeRemaining","className","data-testid","givenSeconds","seconds","round","secondsToDuration","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","TimerDisplay","duration","handleIncrease","handleDecrease","toLowerCase","type","onClick","disabled","INITIAL_STATE","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","state","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df762423.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\nimport { setInterval } from \"../utils/useInterval\";\r\n\r\nexport default function Session({\r\n  session,\r\n  // currentDuration,\r\n  focusDuration,\r\n  breakDuration,\r\n}) {\r\n  if (!session) {\r\n    return null;\r\n  }\r\n\r\n  let x = null;\r\n  session?.label === \"Focusing\" ? (x = focusDuration) : (x = breakDuration);\r\n\r\n  const secondInterval = ((x * 60 - session?.timeRemaining) / (x * 60)) * 100;\r\n  //console.log(currentTimeLeft);\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {session?.label} for{\" \"}\r\n            {session?.label === \"Focusing\"\r\n              ? minutesToDuration(focusDuration)\r\n              : minutesToDuration(breakDuration)}\r\n            {\" minutes\"}\r\n          </h2>\r\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session?.timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={secondInterval} // TODO: Increase aria-valuenow as elapsed time increases\r\n              // 1500 - timeelapsed\r\n              style={{ width: `${secondInterval}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nexport default function TimerDisplay({\r\n  label,\r\n  session,\r\n  duration,\r\n  handleIncrease,\r\n  handleDecrease,\r\n}) {\r\n  return (\r\n    <div className=\"input-group input-group-lg mb-2\">\r\n      <span\r\n        className=\"input-group-text\"\r\n        data-testid={`duration-${label.toLowerCase()}`}\r\n      >\r\n        {/* TODO: Update this text to display the current focus session duration */}\r\n        {label} Duration: {minutesToDuration(duration)}\r\n      </span>\r\n      <div className=\"input-group-append\">\r\n        {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          data-testid={`decrease-${label.toLowerCase()}`}\r\n          onClick={handleDecrease}\r\n          disabled={session}\r\n        >\r\n          <span className=\"oi oi-minus\" />\r\n        </button>\r\n        {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          data-testid={`increase-${label.toLowerCase()}`}\r\n          onClick={handleIncrease}\r\n          disabled={session}\r\n        >\r\n          <span className=\"oi oi-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"./Session\";\n\nimport TimerDisplay from \"./TimerDisplay\";\n\nconst INITIAL_STATE = {\n  isTimerRunning: false,\n  session: null,\n};\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(INITIAL_STATE.session);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(INITIAL_STATE.session);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n  function handleDecreaseFocus() {\n    if (focusDuration === 5) {\n      return;\n    }\n    setFocusDuration((state) => {\n      return state - 5;\n    });\n  }\n  function handleIncreaseFocus() {\n    if (focusDuration >= 60) {\n      return;\n    }\n    setFocusDuration((state) => {\n      return state + 5;\n    });\n  }\n\n  //BlazeMadeThis Don't judge. Don't.\n  function handleIncreaseBreak() {\n    if (breakDuration >= 15) {\n      return;\n    }\n    setBreakDuration((state) => {\n      return state + 1;\n    });\n  }\n  function handleDecreaseBreak() {\n    if (breakDuration <= 1) {\n      return;\n    }\n    setBreakDuration((state) => {\n      return state - 1;\n    });\n  }\n  function handlestop() {\n    setIsTimerRunning(INITIAL_STATE.isTimerRunning);\n    setSession(INITIAL_STATE.session);\n  }\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <TimerDisplay\n            label={\"Focus\"}\n            handleIncrease={handleIncreaseFocus}\n            handleDecrease={handleDecreaseFocus}\n            duration={focusDuration}\n            session={session}\n          />\n        </div>\n\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <TimerDisplay\n              label={\"Break\"}\n              handleIncrease={handleIncreaseBreak}\n              handleDecrease={handleDecreaseBreak}\n              duration={breakDuration}\n              session={session}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!session}\n              onClick={handlestop}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        <Session\n          session={session}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Tomato Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}